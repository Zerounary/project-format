project:
  template:
    dir: "templates/guava"
    output: "../guava-erp"
  data:
    project_name: "guava-erp"
    auth: 1
    redis_session: 1
    overview: 1
    pages:
      - {
          label: "基础信息",
          url: "/",
          children:
            [
              { label: "部门", tableName: "dept" },
              { label: "门店", tableName: "merchant" },
            ],
        }
      - {
          label: "系统管理",
          url: "/",
          children:
            [
              { label: "用户管理", tableName: "user" },
              { label: "角色管理", tableName: "role" },
            ],
        }
    tables:
      # 门店
      - {
          prefix: "b_",
          name: "merchant",
          auth: 1,
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "code",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "门店编码" },
              },
              {
                name: "name",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "门店名称" },
              },
              {
                name: "contacts",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "联系人员" },
              },
              {
                name: "phone",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "联系电话" },
              },
              {
                name: "address",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "门店地址" },
              },
              {
                name: "tax",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "门店税号" },
              },
              {
                name: "bank",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "开户银行" },
              },
              {
                name: "account",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "对公账户" },
              },
              {
                name: "description",
                type: "String",
                dbType: "varchar(80)",
                skip: [1, 1, 1, 1, 1],
                ui: { type: "input-text", label: "备注信息" },
              },
            ],
          ddls: [],
        }
      # 部门
      - {
          prefix: "b_",
          name: "dept",
          skipAuto: true,
          auth: 1,
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "code",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "编码" },
              },
              {
                name: "name",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "名称" },
              },
            ],
          ddls: [],
        }
      # 租户
      # - {
      #     prefix: "sys_",
      #     name: "tenant",
      #     skipAuto: true,
      #     columns:
      #       [
      #         {
      #           name: "id",
      #           type: "i64",
      #           dbType: "int8",
      #           skip: [1, 1, 1, 1],
      #         },
      #         {
      #           name: "name",
      #           type: "String",
      #           dbType: "varchar(120)",
      #           skip: [1, 1, 1, 1],
      #           ui: {
      #             type: 'input-text',
      #             label: '名称'
      #           },
      #         },
      #       ],
      #     ddls: ["create index idx_tenant_name on sys_tenant(name);"],
      #   }
      # 用户
      - {
          prefix: "sys_",
          name: "user",
          auth: 1,
          skipAuto: true,
          ac: 1,
          acCode: '
        let role_ids = bo.role_ids.clone();
        use crate::entities::user_role_bo::UserRoleBO;
        let mut user_roles: Vec<UserRoleBO> = role_ids.split(",").map(|role_id| {
            UserRoleBO { id: 0, user_id: id.clone(), role_id: role_id.parse().unwrap(), description: "".to_string() }
        }).collect();

        self.repo.create_user_role_batch(&mut conn, &mut user_roles, 100).await?;
          ',
          am: 1,
          amCode: '
        self.repo.delete_user_role_by_user_id(&mut conn, bo.id).await?;

        let role_ids = input.role_ids.clone();

        use crate::entities::user_role_bo::UserRoleBO;
        let mut user_roles: Vec<UserRoleBO> = role_ids.split(",").map(|role_id| {
            UserRoleBO { id: 0, user_id: bo.id, role_id: role_id.parse().unwrap(), description: "".to_string() }
        }).collect();

        self.repo.create_user_role_batch(&mut conn, &mut user_roles, 100).await?;
          ',
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "name",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "名称" },
              },
              {
                name: "password",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-password", label: "密码" },
              },
              {
                name: "merchant_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
                ui: { type: "input-number", label: "所属店铺" },
              },
              {
                name: "dept_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
                ui: { type: "input-number", label: "所属部门" },
              },
              {
                name: "is_admin",
                type: "i64",
                dbType: "bool",
                skip: [0, 0, 0, 0],
                ui: { type: "switch", label: "是否管理员" },
              },
              {
                name: "role_ids",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "select", multiple: true, label: "角色" },
              },
            ],
          ddls: ["create index idx_user_name on sys_user(name);"],
        }
      # 角色
      - {
          prefix: "sys_",
          name: "role",
          auth: 1,
          skipAuto: true,
          ac: 1,
          acCode: '

        let menu_ids = bo.perms.clone();

        use crate::entities::role_menu_bo::RoleMenuBO;
        let mut role_menus: Vec<RoleMenuBO> = menu_ids.split(",").map(|menu_id| {
            RoleMenuBO { id: 0, menu_id: menu_id.parse().unwrap() , role_id: id.clone(), description: "".to_string() }
        }).collect_vec();

        self.repo.create_role_menu_batch(&mut conn, &mut role_menus, 100).await?;

          ',
          am: 1,
          amCode: '
        self.repo.delete_role_menu_by_role_id(&mut conn, bo.id).await?;

        use crate::entities::role_menu_bo::RoleMenuBO;
        let menu_ids = bo.perms.clone();

        let mut role_menus: Vec<RoleMenuBO> = menu_ids.split(",").map(|menu_id| {
            RoleMenuBO { id: 0, menu_id: menu_id.parse().unwrap() , role_id: bo.id, description: "".to_string() }
        }).collect_vec();

        self.repo.create_role_menu_batch(&mut conn, &mut role_menus, 100).await?;

          ',
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "name",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "名称" },
              },
              {
                name: "description",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "描述" },
              },
              {
                name: "perms",
                type: "String",
                dbType: "text",
                skip: [1, 1, 1, 1],
                ui:
                  {
                    type: "transfer-picker",
                    source:
                      {
                        method: "GET",
                        url: "/api/menu/list",
                        cache: 2000,
                        adaptor: "return { ...payload, data: {rows: payload.data.rows.map(e => {return {label: e.menu_name, value: e.id}})} }",
                      },
                    label: "权限",
                  },
              },
            ],
          ddls: [],
        }
      # 菜单
      - {
          prefix: "sys_",
          name: "menu",
          auth: 1,
          skipAuto: true,
          listCode: '
            let result = if let Some(user) = self.user.clone() {

              let mut db = self.db.clone();

              db.set_sql_intercepts(vec![]);
              
              let mut conn = db.acquire().await.unwrap();
              
              if user.is_admin == 1 {

                  self.repo.select_menu_list(&mut conn, bo).await?

              }else {

                  self.repo.select_menu_by_ids(&mut conn, &user.role_ids).await?
                  
              }

            } else {

                vec![]

            };
          ',
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              { name: "pid", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "menu_name",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "名称" },
              },
              {
                name: "path",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "路径" },
              },
              {
                name: "component",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "组件" },
              },
              {
                name: "perms",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "权限" },
              },
              {
                name: "icon",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "图标" },
              },
              {
                name: "ty",
                type: "String",
                dbType: "CHAR(2)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "类型" },
              },
              {
                name: "sort",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
                ui: { type: "input-number", label: "排序" },
              },
              {
                name: "description",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
                ui: { type: "input-text", label: "描述" },
              },
            ],
          ddls: ["create index idx_menu_pid on sys_menu(pid);"],
        }
      # 用户角色关系
      - {
          prefix: "sys_",
          name: "user_role",
          auth: 1,
          skipAuto: true,
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "user_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
              },
              {
                name: "role_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
              },
              {
                name: "description",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
              },
            ],
          ddls:
            [
              "create index idx_user_role_user_id on sys_user_role(user_id);",
              "create index idx_user_role_role_id on sys_user_role(role_id);",
            ],
        }
      # 角色菜单关系
      - {
          prefix: "sys_",
          name: "role_menu",
          auth: 1,
          skipAuto: true,
          columns:
            [
              { name: "id", type: "i64", dbType: "int8", skip: [1, 1, 1, 1] },
              {
                name: "menu_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
              },
              {
                name: "role_id",
                type: "i64",
                dbType: "int8",
                skip: [1, 1, 1, 1],
              },
              {
                name: "description",
                type: "String",
                dbType: "varchar(120)",
                skip: [1, 1, 1, 1],
              },
            ],
          ddls:
            [
              "create index idx_role_menu_user_id on sys_role_menu(menu_id);",
              "create index idx_role_menu_role_id on sys_role_menu(role_id);",
            ],
        }

    ddls: []
